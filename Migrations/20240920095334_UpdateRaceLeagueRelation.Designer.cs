// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BetCyclingFriends.Migrations
{
    [DbContext(typeof(BetCyclingFriendsDbContext))]
    [Migration("20240920095334_UpdateRaceLeagueRelation")]
    partial class UpdateRaceLeagueRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.14");

            modelBuilder.Entity("BetCyclingFriends.Domains.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BonusRider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FavoriRider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsGained")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusRider = "Primoz Roglic",
                            FavoriRider = "Tadej Pogacar",
                            PointsGained = 100,
                            RaceId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Password")
                        .IsUnique();

                    b.ToTable("Leagues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "League 1",
                            Password = "123456"
                        },
                        new
                        {
                            Id = 2,
                            Name = "League 2",
                            Password = "654321"
                        });
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.LeagueUser", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PointsInLeague")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeagueId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LeagueUsers");

                    b.HasData(
                        new
                        {
                            LeagueId = 1,
                            UserId = 1,
                            PointsInLeague = 100
                        },
                        new
                        {
                            LeagueId = 1,
                            UserId = 2,
                            PointsInLeague = 200
                        },
                        new
                        {
                            LeagueId = 2,
                            UserId = 1,
                            PointsInLeague = 300
                        },
                        new
                        {
                            LeagueId = 2,
                            UserId = 2,
                            PointsInLeague = 400
                        });
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RaceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealWinner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeagueId = 1,
                            Name = "Stage 1 - Nice",
                            RaceDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Tadej Pogacar"
                        },
                        new
                        {
                            Id = 2,
                            LeagueId = 1,
                            Name = "Stage 2 - Marseille",
                            RaceDate = new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Primoz Roglic"
                        },
                        new
                        {
                            Id = 3,
                            LeagueId = 1,
                            Name = "Stage 3 - Lyon",
                            RaceDate = new DateTime(2023, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Egan Bernal"
                        },
                        new
                        {
                            Id = 4,
                            LeagueId = 1,
                            Name = "Stage 4 - Paris",
                            RaceDate = new DateTime(2023, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Chris Froome"
                        },
                        new
                        {
                            Id = 5,
                            LeagueId = 2,
                            Name = "Stage 1 - Rome",
                            RaceDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Vincenzo Nibali"
                        },
                        new
                        {
                            Id = 6,
                            LeagueId = 2,
                            Name = "Stage 2 - Florence",
                            RaceDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Fabio Aru"
                        },
                        new
                        {
                            Id = 7,
                            LeagueId = 2,
                            Name = "Stage 3 - Milan",
                            RaceDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Alberto Contador"
                        },
                        new
                        {
                            Id = 8,
                            LeagueId = 2,
                            Name = "Stage 4 - Venice",
                            RaceDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RealWinner = "Nairo Quintana"
                        });
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HashedPassword = "hashed_password_1",
                            Username = "john_doe"
                        },
                        new
                        {
                            Id = 2,
                            HashedPassword = "hashed_password_2",
                            Username = "jane_smith"
                        },
                        new
                        {
                            Id = 3,
                            HashedPassword = "hashed_password_3",
                            Username = "alice_jones"
                        },
                        new
                        {
                            Id = 4,
                            HashedPassword = "hashed_password_4",
                            Username = "bob_brown"
                        },
                        new
                        {
                            Id = 5,
                            HashedPassword = "hashed_password_5",
                            Username = "charlie_black"
                        });
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.Bet", b =>
                {
                    b.HasOne("BetCyclingFriends.Domains.Race", "Race")
                        .WithMany("Bets")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetCyclingFriends.Domains.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.LeagueUser", b =>
                {
                    b.HasOne("BetCyclingFriends.Domains.League", "League")
                        .WithMany("LeageUsers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetCyclingFriends.Domains.User", "User")
                        .WithMany("LeagueUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.Race", b =>
                {
                    b.HasOne("BetCyclingFriends.Domains.League", "League")
                        .WithMany("Races")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.League", b =>
                {
                    b.Navigation("LeageUsers");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.Race", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("BetCyclingFriends.Domains.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("LeagueUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
